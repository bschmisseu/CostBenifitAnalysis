{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/hollandaucoin/vscode-workspace/workspace-CST452/CostBenefitFrontend/src/components/Registration.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { emphasize, fade, darken, lighten } from '@material-ui/core/styles/colorManipulator';\nimport clsx from 'clsx';\nimport service from './../service/UserService';\nimport { useHistory } from 'react-router-dom';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { Link } from 'react-router-dom';\nconst useStyles = makeStyles(theme => ({\n  section: {\n    position: \"absolute\",\n    top: \"55%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\"\n  }\n}));\nexport default function Component(props) {\n  _s();\n\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [username, setUsermame] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const [company, setCompany] = useState('');\n\n  const onChangeFirstName = event => {\n    setFirstName(event.target.value);\n  };\n\n  const onChangeLastName = event => {\n    setLastName(event.target.value);\n  };\n\n  const onChangeUsername = event => {\n    setUsermame(event.target.value);\n  };\n\n  const onChangePassword = event => {\n    setPassword(event.target.value);\n  };\n\n  const onChangeEmail = event => {\n    setEmail(event.target.value);\n  };\n\n  const onChangeCompany = event => {\n    setCompany(event.target.value);\n  };\n\n  let history = useHistory();\n\n  const handleSubmit = async event => {\n    const json = JSON.stringify({\n      \"firstName\": firstName,\n      \"lastName\": lastName,\n      \"userCredentials\": {\n        \"username\": username,\n        \"password\": password\n      },\n      \"email\": email,\n      \"company\": company\n    });\n    let status = await service.registerUser(json);\n    event.preventDefault();\n\n    if (status != \"\") {\n      history.push(\"/input\");\n    } else {\n      alert(\"There was a problem processing your request. Please try again later.\");\n    }\n  };\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.section,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"xs\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        pt: 8,\n        pb: 10,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          mb: 3,\n          textAlign: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            component: \"h2\",\n            children: \"Create a new account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(ValidatorForm, {\n            onSubmit: handleSubmit,\n            onError: errors => console.log(errors),\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 6,\n                children: /*#__PURE__*/_jsxDEV(TextValidator, {\n                  variant: \"outlined\",\n                  fullWidth: true,\n                  label: \"First Name *\",\n                  onChange: onChangeFirstName,\n                  name: \"firstName\",\n                  value: firstName,\n                  validators: ['required', 'matchRegexp:^[a-zA-Z]+$', 'matchRegexp:^.{0,15}$'],\n                  errorMessages: ['This field is required', 'Can only contain letters', 'Must be 2 to 15 characters']\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 6,\n                children: /*#__PURE__*/_jsxDEV(TextValidator, {\n                  variant: \"outlined\",\n                  fullWidth: true,\n                  label: \"Last Name *\",\n                  onChange: onChangeLastName,\n                  name: \"lastName\",\n                  value: lastName,\n                  validators: ['required', 'matchRegexp:^[a-zA-Z]+$', 'matchRegexp:^.{0,15}$'],\n                  errorMessages: ['This field is required', 'Can only contain letters', 'Must be 2 to 15 characters']\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextValidator, {\n                  variant: \"outlined\",\n                  fullWidth: true,\n                  label: \"Username *\",\n                  onChange: onChangeUsername,\n                  name: \"username\",\n                  value: username,\n                  validators: ['required', 'matchRegexp:^[a-zA-Z0-9]+$', 'matchRegexp:^.{8,32}$'],\n                  errorMessages: ['This field is required', 'Can only contain letters and numbers', 'Must be 8 to 32 characters']\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextValidator, {\n                  variant: \"outlined\",\n                  fullWidth: true,\n                  type: \"password\",\n                  label: \"Password *\",\n                  onChange: onChangePassword,\n                  name: \"password\",\n                  value: password,\n                  validators: ['required', 'matchRegexp:^.{8,32}$', 'matchRegexp:^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[*.!@$%^&(){}[]:;<>,.?/~_+-=|).{8,32}$'],\n                  errorMessages: ['This field is required', 'Must be 8 to 32 characters', 'Minimum of one uppercase, lowercase, number, and symbol']\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextValidator, {\n                  variant: \"outlined\",\n                  fullWidth: true,\n                  label: \"Email *\",\n                  onChange: onChangeEmail,\n                  name: \"email\",\n                  value: email,\n                  validators: ['required', 'isEmail'],\n                  errorMessages: ['This field is required', 'Invalid email']\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextValidator, {\n                  variant: \"outlined\",\n                  fullWidth: true,\n                  label: \"Company *\",\n                  onChange: onChangeCompany,\n                  name: \"company\",\n                  value: company,\n                  validators: ['required'],\n                  errorMessages: ['This field is required']\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              my: 2,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                fullWidth: true,\n                variant: \"contained\",\n                color: \"primary\",\n                children: \"Sign up\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              textAlign: \"center\",\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/login\",\n                variant: \"body2\",\n                style: {\n                  textDecoration: 'none'\n                },\n                children: \"Already have an account? Sign in\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Component, \"8mufqRTsTbgp2z6sgP9GwU47h8k=\", false, function () {\n  return [useHistory, useStyles];\n});\n\n_c = Component;\n\nvar _c;\n\n$RefreshReg$(_c, \"Component\");","map":{"version":3,"sources":["/Users/hollandaucoin/vscode-workspace/workspace-CST452/CostBenefitFrontend/src/components/Registration.js"],"names":["React","useState","makeStyles","emphasize","fade","darken","lighten","clsx","service","useHistory","ValidatorForm","TextValidator","Container","Box","Typography","Grid","Button","Link","useStyles","theme","section","position","top","left","transform","Component","props","firstName","setFirstName","lastName","setLastName","username","setUsermame","password","setPassword","email","setEmail","company","setCompany","onChangeFirstName","event","target","value","onChangeLastName","onChangeUsername","onChangePassword","onChangeEmail","onChangeCompany","history","handleSubmit","json","JSON","stringify","status","registerUser","preventDefault","push","alert","classes","errors","console","log","textDecoration"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { emphasize, fade, darken, lighten } from '@material-ui/core/styles/colorManipulator';\n\nimport clsx from 'clsx';\nimport service from './../service/UserService';\nimport { useHistory } from 'react-router-dom';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\n\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { Link } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n  section: {\n    position: \"absolute\",\n    top: \"55%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  }\n}\n));\n\nexport default function Component(props) {\n\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [username, setUsermame] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const [company, setCompany] = useState('');\n\n  const onChangeFirstName = (event) => {\n    setFirstName(event.target.value);\n  }\n  const onChangeLastName = (event) => {\n    setLastName(event.target.value);\n  }\n  const onChangeUsername = (event) => {\n    setUsermame(event.target.value);\n  }\n  const onChangePassword = (event) => {\n    setPassword(event.target.value);\n  }\n  const onChangeEmail = (event) => {\n    setEmail(event.target.value);\n  }\n  const onChangeCompany = (event) => {\n    setCompany(event.target.value);\n  }\n\n  let history = useHistory();\n\n  const handleSubmit = async (event) => {\n\n    const json = JSON.stringify({\n      \"firstName\": firstName,\n      \"lastName\": lastName,\n      \"userCredentials\": {\n        \"username\": username,\n        \"password\": password,\n      },\n      \"email\": email,\n      \"company\": company\n    });\n\n    let status = await service.registerUser(json);\n    event.preventDefault();\n\n    if (status != \"\") {\n      history.push(\"/input\");\n    }\n    else {\n      alert(\"There was a problem processing your request. Please try again later.\");\n    }\n  }\n\n  const classes = useStyles();\n\n  return (\n    <section className={classes.section}>\n      <Container maxWidth=\"xs\">\n        <Box pt={8} pb={10}>\n          <Box mb={3} textAlign=\"center\">\n            <Typography variant=\"h5\" component=\"h2\">Create a new account</Typography>\n          </Box>\n          <Box>\n\n            <ValidatorForm onSubmit={handleSubmit} onError={errors => console.log(errors)}>\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                  <TextValidator variant=\"outlined\" fullWidth\n                    label=\"First Name *\"\n                    onChange={onChangeFirstName}\n                    name=\"firstName\"\n                    value={firstName}\n                    validators={['required', 'matchRegexp:^[a-zA-Z]+$', 'matchRegexp:^.{0,15}$']}\n                    errorMessages={['This field is required', 'Can only contain letters', 'Must be 2 to 15 characters']}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextValidator variant=\"outlined\" fullWidth\n                    label=\"Last Name *\"\n                    onChange={onChangeLastName}\n                    name=\"lastName\"\n                    value={lastName}\n                    validators={['required', 'matchRegexp:^[a-zA-Z]+$', 'matchRegexp:^.{0,15}$']}\n                    errorMessages={['This field is required', 'Can only contain letters', 'Must be 2 to 15 characters']}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextValidator variant=\"outlined\" fullWidth\n                    label=\"Username *\"\n                    onChange={onChangeUsername}\n                    name=\"username\"\n                    value={username}\n                    validators={['required', 'matchRegexp:^[a-zA-Z0-9]+$', 'matchRegexp:^.{8,32}$']}\n                    errorMessages={['This field is required', 'Can only contain letters and numbers', 'Must be 8 to 32 characters']}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextValidator variant=\"outlined\" fullWidth type=\"password\"\n                    label=\"Password *\"\n                    onChange={onChangePassword}\n                    name=\"password\"\n                    value={password}\n                    validators={['required', 'matchRegexp:^.{8,32}$', 'matchRegexp:^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[*.!@$%^&(){}[]:;<>,.?/~_+-=|).{8,32}$']}\n                    errorMessages={['This field is required', 'Must be 8 to 32 characters', 'Minimum of one uppercase, lowercase, number, and symbol']}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextValidator variant=\"outlined\" fullWidth\n                    label=\"Email *\"\n                    onChange={onChangeEmail}\n                    name=\"email\"\n                    value={email}\n                    validators={['required', 'isEmail']}\n                    errorMessages={['This field is required', 'Invalid email']}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextValidator variant=\"outlined\" fullWidth\n                    label=\"Company *\"\n                    onChange={onChangeCompany}\n                    name=\"company\"\n                    value={company}\n                    validators={['required']}\n                    errorMessages={['This field is required']}\n                  />\n                </Grid>\n              </Grid>\n              <Box my={2}>\n                <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">Sign up</Button>\n              </Box>\n              <Box textAlign=\"center\">\n                <Link to=\"/login\" variant=\"body2\" style={{ textDecoration: 'none' }}>Already have an account? Sign in</Link>\n              </Box>\n            </ValidatorForm>\n          </Box>\n        </Box>\n      </Container>\n    </section>\n  );\n}"]},"metadata":{},"sourceType":"module"}